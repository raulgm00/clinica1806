spring.application.name=Clinica-MVC

#LOGGING
-=INFO

#Consologear en consola
logging.level.org.springframework.web=INFO
#logging.level.org.hibernate=ERROR
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%highlight(%-5level)] [%cyan(%thread)] %magenta(%logger{15}) - %msg%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%highlight(%-5level)] [%cyan(%thread)] [%magenta(%logger{15}:%L)] - %msg%n
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%highlight(%-5level)] [%cyan(%thread)] [%magenta(%c{1}:%L] ) - %msg%n


#Configurcion H2
#Activa la consola para mirar la base desde el gestor
#spring.h2.console.enabled=true
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.url=jdbc:h2:mem:clinicatest21
#spring.datasource.username=sa
#spring.datasource.password=sa
#muestra por consola las sentencias sql
#spring.jpa.show-sql=true
#Cada ves que levanto el server borra y crea las tablas
#spring.jpa.hibernate.ddl-auto=create-drop

#Configuracion h2 Persistente
#spring.h2.console.enabled=true
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.url=jdbc:h2:~/clinicatest11
#spring.datasource.username=sa
#spring.datasource.password=sa
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update


#Colocar otro puerto al server
#server.port=8082


## configuracion de MySQL
#spring.datasource.url=jdbc:mysql://localhost:3306/clinica1806
##jdbc:mysql://localhost:3306/clinica1806?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=welcome1
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


#Deploy de App en netfly
## configuracion de MySQL
spring.datasource.url = jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?createDatabaseIfNotExist=true
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.user.datasource.driver-class-name=com.mysql.jdbc.driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#Muestra como se forman las consultas en el log
spring.jpa.properties.hibernate.format_sql=true

















